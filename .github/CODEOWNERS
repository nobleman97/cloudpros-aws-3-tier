# To use a CODEOWNERS file, create a new file called CODEOWNER
# in the root, docs/, or .github/ directory of the repository,
# in the branch where you'd like to add the code owners.

# Each CODEOWNERS file assigns the code owners for a single
# branch in the repository. Thus, you can assign different code
# owners for different branches, such as @octo-org/codeowners-team
# for a code base on the default branch and @octocat for a GitHub
# Pages site on the gh-pages branch.

# For code owners to receive review requests, the CODEOWNERS
# file must be on the base branch of the pull request. For example,
# if you assign @octocat as the code owner for .js files on the gh-pages
# branch of your repository, @octocat will receive review requests
# when a pull request with changes to .js files is opened between
# the head branch and gh-pages.

# This is a comment.
# Each line is a file pattern followed by one or more owners.

# These owners will be the default owners for everything in
# the repo. Unless a later match takes precedence,
# @global-owner1 and @global-owner2 will be requested for
# review when someone opens a pull request.
# *       @global-owner1 @global-owner2

# Order is important; the last matching pattern takes the most
# precedence. When someone opens a pull request that only
# modifies JS files, only @js-owner and not the global
# owner(s) will be requested for a review.
# *.js    @js-owner

# You can also use email addresses if you prefer. They'll be
# used to look up users just like we do for commit author
# emails.
# *.go docs@example.com

# Teams can be specified as code owners as well. Teams should
# be identified in the format @org/team-name. Teams must have
# explicit write access to the repository. In this example,
# the octocats team in the octo-org organization owns all .txt files.
# *.txt @octo-org/octocats

# In this example, @doctocat owns any files in the build/logs
# directory at the root of the repository and any of its
# subdirectories.
# /build/logs/ @doctocat

# The `docs/*` pattern will match files like
# `docs/getting-started.md` but not further nested files like
# `docs/build-app/troubleshooting.md`.
# docs/*  docs@example.com

# In this example, @octocat owns any file in an apps directory
# anywhere in your repository.
# apps/ @octocat

# In this example, @doctocat owns any file in the `/docs`
# directory in the root of your repository and any of its
# subdirectories.
# /docs/ @doctocat

# In this example, any change inside the `/scripts` directory
# will require approval from @doctocat or @octocat.
# /scripts/ @doctocat @octocat

# In this example, @octocat owns any file in the `/apps`
# directory in the root of your repository except for the `/apps/github`
# subdirectory, as its owners are left empty.
# /apps/ @octocat
# /apps/github

# In this example, any change inside the `/.github/workflows` directory
# will require approval from @doctocat or @octocat.
# Adding CODEOWNERS for testing (possible?)
@cloud-engineering 
